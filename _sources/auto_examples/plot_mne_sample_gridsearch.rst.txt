

.. _sphx_glr_auto_examples_plot_mne_sample_gridsearch.py:


==========================================================================
Use scikit-learn GridSearchCV with FeatureExtractor for setting parameters
==========================================================================

The example shows how :class:`~sklearn.model_selection.GridSearchCV`
can be used for parameter tuning in a pipeline which sequentially
combines feature extraction (with
:class:`mne_features.feature_extraction.FeatureExtractor`),
data standardization (with :class:`~sklearn.preprocessing.StandardScaler`)
and classification (with :class:`~sklearn.linear_model.LogisticRegression`).

The code for this example is based on the method proposed in:

Jean-Baptiste SCHIRATTI, Jean-Eudes LE DOUGET, Michel LE VAN QUYEN,
Slim ESSID, Alexandre GRAMFORT,
"An ensemble learning approach to detect epileptic seizures from long
intracranial EEG recordings"
Proc. IEEE ICASSP Conf. 2018

.. note::

    This example is for illustration purposes, as other methods
    may lead to better performance on such a dataset (classification
    of auditory vs. visual stimuli).




.. code-block:: python


    # Author: Jean-Baptiste Schiratti <jean.baptiste.schiratti@gmail.com>
    #         Guillaume Corda <guillaume.corda@telecom-paristech.fr>
    #         Alexandre Gramfort <alexandre.gramfort@inria.fr>
    # License: BSD 3 clause

    import mne
    import numpy as np
    import pandas as pd
    from mne.datasets import sample
    from mne_features.feature_extraction import FeatureExtractor
    from sklearn.linear_model import LogisticRegression
    from sklearn.preprocessing import StandardScaler
    from sklearn.model_selection import (GridSearchCV, cross_val_score,
                                         StratifiedKFold)
    from sklearn.pipeline import Pipeline

    print(__doc__)







Let us import the data using MNE-Python and epoch it:



.. code-block:: python


    data_path = sample.data_path()
    raw_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw.fif'
    event_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw-eve.fif'
    tmin, tmax = -0.2, 0.5
    event_id = dict(aud_l=1, vis_l=3)

    # Setup for reading the raw data
    raw = mne.io.read_raw_fif(raw_fname, preload=True)
    raw.filter(.5, None, fir_design='firwin')
    events = mne.read_events(event_fname)
    picks = mne.pick_types(raw.info, meg='grad', eeg=False)

    # Read epochs
    epochs = mne.Epochs(raw, events, event_id, tmin, tmax, picks=picks, proj=True,
                        baseline=None, preload=True)
    labels = epochs.events[:, -1]

    # get MEG and EEG data
    data = epochs.get_data()





.. rst-class:: sphx-glr-script-out

 Out::

    Successfully extracted to: [u'/data/jbschiratti/mne_data/MNE-sample-data']
    Opening raw data file /home/users/jbschiratti/mne_data/MNE-sample-data/MEG/sample/sample_audvis_filt-0-40_raw.fif...
        Read a total of 4 projection items:
            PCA-v1 (1 x 102)  idle
            PCA-v2 (1 x 102)  idle
            PCA-v3 (1 x 102)  idle
            Average EEG reference (1 x 60)  idle
        Range : 6450 ... 48149 =     42.956 ...   320.665 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 41699  =      0.000 ...   277.709 secs...
    Setting up high-pass filter at 0.5 Hz
    l_trans_bandwidth chosen to be 0.5 Hz
    Filter length of 991 samples (6.600 sec) selected
    145 matching events found
    4 projection items activated
    Loading data for 145 events and 106 original time points ...
    0 bad epochs dropped


Prepare for the classification task:



.. code-block:: python


    pipe = Pipeline([('fe', FeatureExtractor(sfreq=raw.info['sfreq'],
                                             selected_funcs=['app_entropy',
                                                             'mean'],
                                             memory='.')),
                     ('scaler', StandardScaler()),
                     ('clf', LogisticRegression(random_state=42))])
    skf = StratifiedKFold(n_splits=3, random_state=42)
    y = labels







Cross-validation accuracy score with default parameters (emb = 2, by default
for `compute_app_entropy`):



.. code-block:: python


    scores = cross_val_score(pipe, data, y, cv=skf)
    print('Cross-validation accuracy score (with default parameters) = %1.3f '
          '(+/- %1.5f)' % (np.mean(scores), np.std(scores)))





.. rst-class:: sphx-glr-script-out

 Out::

    ________________________________________________________________________________
    [Memory] Calling mne_features.feature_extraction.extract_features...
    extract_features(array([[[  6.193789e-12, ...,  -1.395502e-12],
            ..., 
            [  3.197965e-12, ...,  -1.221891e-12]],

           ..., 
           [[ -1.863622e-12, ...,   7.081302e-12],
            ..., 
            [ -1.839283e-12, ...,   2.817538e-12]]]), 
    150.15374755859375, ['app_entropy', 'mean'], n_jobs=1, funcs_params=None)
    _________________________________________________extract_features - 8.2s, 0.1min
    ________________________________________________________________________________
    [Memory] Calling mne_features.feature_extraction.extract_features...
    extract_features(array([[[  5.256817e-12, ...,   1.098767e-11],
            ..., 
            [  2.650032e-12, ...,   7.262601e-12]],

           ..., 
           [[  3.707438e-12, ...,   7.565477e-12],
            ..., 
            [ -2.589417e-12, ...,   2.492014e-12]]]), 
    150.15374755859375, ['app_entropy', 'mean'], n_jobs=1, funcs_params=None)
    _________________________________________________extract_features - 4.0s, 0.1min
    Cross-validation accuracy score (with default parameters) = 0.828 (+/- 0.01071)


Optimization of features extraction optional parameters:
Here, only the embedding dimension parameter of
:func:`mne_features.univariate.compute_app_entropy` is optimized using
GridSearchCV.



.. code-block:: python


    params_grid = {'fe__app_entropy__emb': np.arange(2, 5)}

    gs = GridSearchCV(estimator=pipe, param_grid=params_grid,
                      cv=StratifiedKFold(n_splits=2, random_state=42), n_jobs=1)
    gs.fit(data, y)

    # Best parameters obtained with GridSearchCV:
    print(gs.best_params_)





.. rst-class:: sphx-glr-script-out

 Out::

    ________________________________________________________________________________
    [Memory] Calling mne_features.feature_extraction.extract_features...
    extract_features(array([[[  2.297636e-11, ...,   3.022934e-12],
            ..., 
            [  1.016190e-11, ...,  -1.012862e-12]],

           ..., 
           [[  3.707438e-12, ...,   7.565477e-12],
            ..., 
            [ -2.589417e-12, ...,   2.492014e-12]]]), 
    150.15374755859375, ['app_entropy', 'mean'], n_jobs=1, funcs_params={ 'app_entropy__emb': 2})
    _________________________________________________extract_features - 5.9s, 0.1min
    ________________________________________________________________________________
    [Memory] Calling mne_features.feature_extraction.extract_features...
    extract_features(array([[[  6.193789e-12, ...,  -1.395502e-12],
            ..., 
            [  3.197965e-12, ...,  -1.221891e-12]],

           ..., 
           [[ -4.372232e-12, ...,   3.161050e-12],
            ..., 
            [ -1.893307e-13, ...,  -1.851915e-12]]]), 
    150.15374755859375, ['app_entropy', 'mean'], n_jobs=1, funcs_params={ 'app_entropy__emb': 2})
    _________________________________________________extract_features - 6.2s, 0.1min
    ________________________________________________________________________________
    [Memory] Calling mne_features.feature_extraction.extract_features...
    extract_features(array([[[  2.297636e-11, ...,   3.022934e-12],
            ..., 
            [  1.016190e-11, ...,  -1.012862e-12]],

           ..., 
           [[  3.707438e-12, ...,   7.565477e-12],
            ..., 
            [ -2.589417e-12, ...,   2.492014e-12]]]), 
    150.15374755859375, ['app_entropy', 'mean'], n_jobs=1, funcs_params={ 'app_entropy__emb': 3})
    _________________________________________________extract_features - 5.9s, 0.1min
    ________________________________________________________________________________
    [Memory] Calling mne_features.feature_extraction.extract_features...
    extract_features(array([[[  6.193789e-12, ...,  -1.395502e-12],
            ..., 
            [  3.197965e-12, ...,  -1.221891e-12]],

           ..., 
           [[ -4.372232e-12, ...,   3.161050e-12],
            ..., 
            [ -1.893307e-13, ...,  -1.851915e-12]]]), 
    150.15374755859375, ['app_entropy', 'mean'], n_jobs=1, funcs_params={ 'app_entropy__emb': 3})
    _________________________________________________extract_features - 6.2s, 0.1min
    ________________________________________________________________________________
    [Memory] Calling mne_features.feature_extraction.extract_features...
    extract_features(array([[[  2.297636e-11, ...,   3.022934e-12],
            ..., 
            [  1.016190e-11, ...,  -1.012862e-12]],

           ..., 
           [[  3.707438e-12, ...,   7.565477e-12],
            ..., 
            [ -2.589417e-12, ...,   2.492014e-12]]]), 
    150.15374755859375, ['app_entropy', 'mean'], n_jobs=1, funcs_params={ 'app_entropy__emb': 4})
    _________________________________________________extract_features - 6.0s, 0.1min
    ________________________________________________________________________________
    [Memory] Calling mne_features.feature_extraction.extract_features...
    extract_features(array([[[  6.193789e-12, ...,  -1.395502e-12],
            ..., 
            [  3.197965e-12, ...,  -1.221891e-12]],

           ..., 
           [[ -4.372232e-12, ...,   3.161050e-12],
            ..., 
            [ -1.893307e-13, ...,  -1.851915e-12]]]), 
    150.15374755859375, ['app_entropy', 'mean'], n_jobs=1, funcs_params={ 'app_entropy__emb': 4})
    _________________________________________________extract_features - 6.4s, 0.1min
    ________________________________________________________________________________
    [Memory] Calling mne_features.feature_extraction.extract_features...
    extract_features(array([[[  6.193789e-12, ...,  -1.395502e-12],
            ..., 
            [  3.197965e-12, ...,  -1.221891e-12]],

           ..., 
           [[  3.707438e-12, ...,   7.565477e-12],
            ..., 
            [ -2.589417e-12, ...,   2.492014e-12]]]), 
    150.15374755859375, ['app_entropy', 'mean'], n_jobs=1, funcs_params={ 'app_entropy__emb': 3})
    ________________________________________________extract_features - 12.3s, 0.2min
    {'fe__app_entropy__emb': 3}


Scores with all parameter values:



.. code-block:: python

    scores = pd.DataFrame(gs.cv_results_)
    print(scores[['params', 'mean_test_score', 'mean_train_score']])





.. rst-class:: sphx-glr-script-out

 Out::

    params  mean_test_score  mean_train_score
    0  {u'fe__app_entropy__emb': 2}         0.820690               1.0
    1  {u'fe__app_entropy__emb': 3}         0.875862               1.0
    2  {u'fe__app_entropy__emb': 4}         0.855172               1.0


Cross-validation accuracy score with optimized parameters:



.. code-block:: python


    gs_best = gs.best_estimator_
    new_scores = cross_val_score(gs_best, data, y, cv=skf)

    print('Cross-validation accuracy score (with optimized parameters) = %1.3f '
          '(+/- %1.5f)' % (np.mean(new_scores), np.std(new_scores)))




.. rst-class:: sphx-glr-script-out

 Out::

    ________________________________________________________________________________
    [Memory] Calling mne_features.feature_extraction.extract_features...
    extract_features(array([[[  1.540954e-11, ...,  -6.295133e-12],
            ..., 
            [  1.325555e-11, ...,   1.026145e-11]],

           ..., 
           [[  3.707438e-12, ...,   7.565477e-12],
            ..., 
            [ -2.589417e-12, ...,   2.492014e-12]]]), 
    150.15374755859375, ['app_entropy', 'mean'], n_jobs=1, funcs_params={ 'app_entropy__emb': 3})
    _________________________________________________extract_features - 8.2s, 0.1min
    ________________________________________________________________________________
    [Memory] Calling mne_features.feature_extraction.extract_features...
    extract_features(array([[[  6.193789e-12, ...,  -1.395502e-12],
            ..., 
            [  3.197965e-12, ...,  -1.221891e-12]],

           ..., 
           [[ -2.267405e-12, ...,   6.823774e-12],
            ..., 
            [ -2.694724e-12, ...,   4.481624e-12]]]), 
    150.15374755859375, ['app_entropy', 'mean'], n_jobs=1, funcs_params={ 'app_entropy__emb': 3})
    _________________________________________________extract_features - 4.2s, 0.1min
    ________________________________________________________________________________
    [Memory] Calling mne_features.feature_extraction.extract_features...
    extract_features(array([[[  6.193789e-12, ...,  -1.395502e-12],
            ..., 
            [  3.197965e-12, ...,  -1.221891e-12]],

           ..., 
           [[  3.707438e-12, ...,   7.565477e-12],
            ..., 
            [ -2.589417e-12, ...,   2.492014e-12]]]), 
    150.15374755859375, ['app_entropy', 'mean'], n_jobs=1, funcs_params={ 'app_entropy__emb': 3})
    _________________________________________________extract_features - 7.9s, 0.1min
    ________________________________________________________________________________
    [Memory] Calling mne_features.feature_extraction.extract_features...
    extract_features(array([[[  1.540954e-11, ...,  -6.295133e-12],
            ..., 
            [  1.325555e-11, ...,   1.026145e-11]],

           ..., 
           [[ -1.863622e-12, ...,   7.081302e-12],
            ..., 
            [ -1.839283e-12, ...,   2.817538e-12]]]), 
    150.15374755859375, ['app_entropy', 'mean'], n_jobs=1, funcs_params={ 'app_entropy__emb': 3})
    _________________________________________________extract_features - 4.1s, 0.1min
    ________________________________________________________________________________
    [Memory] Calling mne_features.feature_extraction.extract_features...
    extract_features(array([[[  6.193789e-12, ...,  -1.395502e-12],
            ..., 
            [  3.197965e-12, ...,  -1.221891e-12]],

           ..., 
           [[ -1.863622e-12, ...,   7.081302e-12],
            ..., 
            [ -1.839283e-12, ...,   2.817538e-12]]]), 
    150.15374755859375, ['app_entropy', 'mean'], n_jobs=1, funcs_params={ 'app_entropy__emb': 3})
    _________________________________________________extract_features - 8.2s, 0.1min
    ________________________________________________________________________________
    [Memory] Calling mne_features.feature_extraction.extract_features...
    extract_features(array([[[  5.256817e-12, ...,   1.098767e-11],
            ..., 
            [  2.650032e-12, ...,   7.262601e-12]],

           ..., 
           [[  3.707438e-12, ...,   7.565477e-12],
            ..., 
            [ -2.589417e-12, ...,   2.492014e-12]]]), 
    150.15374755859375, ['app_entropy', 'mean'], n_jobs=1, funcs_params={ 'app_entropy__emb': 3})
    _________________________________________________extract_features - 4.1s, 0.1min
    Cross-validation accuracy score (with optimized parameters) = 0.890 (+/- 0.01036)


**Total running time of the script:** ( 1 minutes  40.502 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_mne_sample_gridsearch.py <plot_mne_sample_gridsearch.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_mne_sample_gridsearch.ipynb <plot_mne_sample_gridsearch.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
