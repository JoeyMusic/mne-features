.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_user_defined_function.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_user_defined_function.py:


======================================================
Extract features using user-defined feature functions.
======================================================

The example shows how user-defined feature functions can be used in
MNE-Features along with built-in feature functions.

The code for this example is based on the method proposed in:

Jean-Baptiste SCHIRATTI, Jean-Eudes LE DOUGET, Michel LE VAN QUYEN,
Slim ESSID, Alexandre GRAMFORT,
"An ensemble learning approach to detect epileptic seizures from long
intracranial EEG recordings"
Proc. IEEE ICASSP Conf. 2018

.. note::

    This example is for illustration purposes, as other methods
    may lead to better performance on such a dataset (classification
    of auditory vs. visual stimuli).




.. code-block:: python


    # Author: Jean-Baptiste Schiratti <jean.baptiste.schiratti@gmail.com>
    #         Alexandre Gramfort <alexandre.gramfort@inria.fr>
    # License: BSD 3 clause

    from scipy.signal import medfilt

    import mne
    from mne.datasets import sample

    from sklearn.linear_model import LogisticRegression
    from sklearn.model_selection import (train_test_split, StratifiedKFold)
    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler

    from mne_features.feature_extraction import FeatureExtractor

    print(__doc__)







Let us import the data using MNE-Python and epoch it:



.. code-block:: python


    data_path = sample.data_path()
    raw_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw.fif'
    event_fname = data_path + '/MEG/sample/sample_audvis_filt-0-40_raw-eve.fif'
    tmin, tmax = -0.2, 0.5
    event_id = dict(aud_l=1, vis_l=3)

    # Setup for reading the raw data
    raw = mne.io.read_raw_fif(raw_fname, preload=True)
    raw.filter(.5, None, fir_design='firwin')
    events = mne.read_events(event_fname)
    picks = mne.pick_types(raw.info, meg=False, eeg=True)

    # Read epochs
    epochs = mne.Epochs(raw, events, event_id, tmin, tmax, picks=picks, proj=True,
                        baseline=None, preload=True)
    labels = epochs.events[:, -1]

    # get MEG and EEG data
    data = epochs.get_data()





.. rst-class:: sphx-glr-script-out

 Out::

    Opening raw data file /home/users/jbschiratti/mne_data/MNE-sample-data/MEG/sample/sample_audvis_filt-0-40_raw.fif...
        Read a total of 4 projection items:
            PCA-v1 (1 x 102)  idle
            PCA-v2 (1 x 102)  idle
            PCA-v3 (1 x 102)  idle
            Average EEG reference (1 x 60)  idle
        Range : 6450 ... 48149 =     42.956 ...   320.665 secs
    Ready.
    Current compensation grade : 0
    Reading 0 ... 41699  =      0.000 ...   277.709 secs...
    Setting up high-pass filter at 0.5 Hz
    l_trans_bandwidth chosen to be 0.5 Hz
    Filter length of 991 samples (6.600 sec) selected
    145 matching events found
    No baseline correction applied
    Not setting metadata
    Created an SSP operator (subspace dimension = 1)
    4 projection items activated
    Loading data for 145 events and 106 original time points ...
    0 bad epochs dropped


Define a feature function called ``compute_medfilt``
----------------------------------------------------

Here, the raw data is median filtered and the output signals are used
as features.



.. code-block:: python



    def compute_medfilt(arr):
        """Median filtered signal as features.

        Parameters
        ----------
        arr : ndarray, shape (n_channels, n_times)

        Returns
        -------
        output : (n_channels * n_times,)
        """
        return medfilt(arr, kernel_size=(1, 5)).ravel()








Prepare for the classification task
-----------------------------------

In addition to the new feature function, we also propose to extract the
mean of the data:



.. code-block:: python

    selected_funcs = [('medfilt', compute_medfilt), 'mean']

    pipe = Pipeline([('fe', FeatureExtractor(sfreq=raw.info['sfreq'],
                                             selected_funcs=selected_funcs)),
                     ('scaler', StandardScaler()),
                     ('clf', LogisticRegression(random_state=42))])
    skf = StratifiedKFold(n_splits=3, random_state=42)
    y = labels







Print the accuracy score on a test dataset.



.. code-block:: python


    X_train, X_test, y_train, y_test = train_test_split(data, y, test_size=0.2)
    accuracy = pipe.fit(X_train, y_train).score(X_test, y_test)
    print('Accuracy score = %1.3f' % accuracy)




.. rst-class:: sphx-glr-script-out

 Out::

    Accuracy score = 0.897


**Total running time of the script:** ( 0 minutes  1.375 seconds)


.. _sphx_glr_download_auto_examples_plot_user_defined_function.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_user_defined_function.py <plot_user_defined_function.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_user_defined_function.ipynb <plot_user_defined_function.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
